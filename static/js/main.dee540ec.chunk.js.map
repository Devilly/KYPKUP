{"version":3,"sources":["Entry.js","index.js","App.js"],"names":["props","href","url","title","ReactDOM","render","useState","listItems","setListItems","useEffect","a","fetch","response","json","newListItems","data","children","slice","map","child","id","time","created_utc","concat","addHackerNewsStory","storyResponse","storyJson","some","entry","index","shift","entries","filter","sort","firstEntry","secondEntry","Entry","key","source","style","listStyleType","margin","padding","document","getElementById"],"mappings":"8KAEe,WAAAA,GACb,OACE,4BACE,uBAAGC,KAAMD,EAAME,KAAMF,EAAMG,SCAjCC,IAASC,OAAO,mBCFD,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACZC,EADY,KACDC,EADC,KAGnBC,qBAAU,WACR,sBAAC,oCAAAC,EAAA,sEAEsBC,MAAM,6CAF5B,cAEKC,EAFL,gBAGkBA,EAASC,OAH3B,cAGKA,EAHL,OAKOC,EAAeD,EAAKE,KAAKC,SAASC,MAAM,EAAG,IAAIC,KAAI,SAAAC,GACvD,MAAO,CACLC,GAAI,UAAYD,EAAMJ,KAAKK,GAC3BjB,MAAOgB,EAAMJ,KAAKZ,MAClBD,IAAKiB,EAAMJ,KAAKb,IAChBmB,KAAMF,EAAMJ,KAAKO,gBAIrBd,GAAa,SAAAD,GAAS,OAAIA,EAAUgB,OAAOT,MAd5C,UAiBkBH,MAAM,yDAjBxB,eAiBCC,EAjBD,iBAkBcA,EAASC,OAlBvB,QAkBCA,EAlBD,OAoBOW,EApBP,+BAAAd,EAAA,MAoB4B,WAAMU,GAAN,iBAAAV,EAAA,sEACGC,MAAM,8CAAD,OAA+CS,EAA/C,UADR,cACnBK,EADmB,gBAEDA,EAAcZ,OAFb,OAEnBa,EAFmB,OAIzBlB,GAAa,SAAAD,GAKX,OAJsBA,EAAUoB,MAAK,SAAUC,GAC7C,OAAOA,EAAM1B,MAAQuB,EAAcvB,OAI5BK,EAEAA,EAAUgB,OAAO,CACtBH,GAAI,cAAgBM,EAAUN,GAC9BjB,MAAOuB,EAAUvB,MACjBD,IAAKwB,EAAUxB,IACfmB,KAAMK,EAAUL,UAhBG,2CApB5B,sDA0CSQ,EAAQ,EA1CjB,aA0CoBA,EAAQ,IA1C5B,kCA2CSL,EAAmBX,EAAKiB,SA3CjC,QA0CgCD,IA1ChC,2DAAD,KA8CC,IAEH,IAAIE,EAAUxB,EAAUyB,QAAO,SAAAJ,GAC7B,OAAOA,EAAMzB,OAASyB,EAAM1B,KAAO0B,EAAMP,QACxCY,MAAK,SAACC,EAAYC,GASnB,OAPID,EAAWb,KAAOc,EAAYd,MACvB,EACAa,EAAWb,KAAOc,EAAYd,KAC/B,EAEA,KAGTH,KAAI,SAAAU,GACL,OACE,kBAACQ,EAAD,CAAOC,IAAKT,EAAMR,GAAIkB,OAAQV,EAAMU,OAAQnC,MAAOyB,EAAMzB,MAAOD,IAAK0B,EAAM1B,SAU/E,OACE,wBAAIqC,MAPM,CACVC,cAAe,OACfC,OAAQ,EACRC,QAAS,IAIUX,KD3EP,MAASY,SAASC,eAAe,U","file":"static/js/main.dee540ec.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default props => {\n  return (\n    <li>\n      <a href={props.url}>{props.title}</a>\n    </li>\n  );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { useState, useEffect } from 'react';\nimport Entry from './Entry';\n\nexport default () => {\n  const [listItems, setListItems] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      // Load entries from Reddit.\n      let response = await fetch('https://www.reddit.com/r/programming.json');\n      let json = await response.json();\n\n      const newListItems = json.data.children.slice(0, 10).map(child => {\n        return {\n          id: 'reddit-' + child.data.id,\n          title: child.data.title,\n          url: child.data.url,\n          time: child.data.created_utc\n        };\n      });\n\n      setListItems(listItems => listItems.concat(newListItems));\n\n      // Load entries from Hacker News.\n      response = await fetch('https://hacker-news.firebaseio.com/v0/topstories.json');\n      json = await response.json();\n\n      const addHackerNewsStory = async id => {\n        const storyResponse = await fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`);\n        const storyJson = await storyResponse.json();\n\n        setListItems(listItems => {\n          var isAlreadyListed = listItems.some(function (entry) {\n            return entry.url === storyResponse.url;\n          });\n\n          if (isAlreadyListed) {\n            return listItems;\n          } else {\n            return listItems.concat({\n              id: 'hackernews-' + storyJson.id,\n              title: storyJson.title,\n              url: storyJson.url,\n              time: storyJson.time\n            });\n          }\n        });\n      };\n\n      for(let index = 0; index < 10; index++) {\n        await addHackerNewsStory(json.shift());\n      }\n    })();\n  }, []);\n\n  var entries = listItems.filter(entry => {\n    return entry.title && entry.url && entry.time;\n  }).sort((firstEntry, secondEntry) => {\n    var value;\n    if (firstEntry.time < secondEntry.time) {\n      value = -1;\n    } else if (firstEntry.time > secondEntry.time) {\n      value = 1;\n    } else {\n      value = 0;\n    }\n    return value;\n  }).map(entry => {\n    return (\n      <Entry key={entry.id} source={entry.source} title={entry.title} url={entry.url} />\n    );\n  });\n\n  var style = {\n    listStyleType: 'none',\n    margin: 0,\n    padding: 0\n  };\n\n  return (\n    <ul style={style}>{entries}</ul>\n  );\n};\n"],"sourceRoot":""}